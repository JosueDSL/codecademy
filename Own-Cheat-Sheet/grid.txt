To set up a grid, is needed to have both a grid container and grid items. 
The grid container will be a parent element that contains grid items as children and applies overarching styling and positioning to them.
To set a grid container:
display: grid;

By default, grids contain only one column. If you were to start adding items, each item would be put on a new row.
To change this, we need to explicitly define the number of rows and columns in our grid.
We can define the columns of our grid by using the CSS property grid-template-columns
This property creates two changes. First, it defines the number of columns in the grid; in this case, there are two. Second, it sets the width of each column.
.grid {
  display: grid;
  width: 500px;
  grid-template-columns: 100px 200px;
}
It can be also set with percentage % of the entire grid's width
When using percentages in these two properties, remember that rows are defined as a percentage of the grid’s height, and columns are defined as a percentage of its width.
Same thing would be with:
 grid-template-rows: ;

The shorthand property, grid-template, can replace the previous two CSS properties.
By using the * fr * unit, we can define the size of columns and rows as a fraction of the grid’s length and width.
Using fr makes it easier to prevent grid items from overflowing the boundaries of the grid. fr stands for 'fraction'
Eeach fr gets one fraction of the total available to split between them.
 width: 100px;
 grid-template-columns: 1fr 60px 1fr;
 = 20px, 60px, 20px;

The repeat function will duplicate the specifications for rows or columns a given number of times.
.grid {
  display: grid;
  width: 300px;
  grid-template-columns: repeat(3, 100px);
}
In the example above, using the repeat function will make the grid have three columns that are each 100 pixels wide. It is the same as writing:
grid-template-columns: 100px 100px 100px;

sometimes you might want a grid to resize based on the size of your web browser.
 grid-template-columns: 100px minmax(100px, 500px) 100px;
The second column will always be between 100 and 500 pixels wide.

The CSS properties row-gap and column-gap will put blank space between every row and column in the grid.
There is a shorthand CSS property, gap, that can set the row and column gap at the same time.
Unlike other CSS grid properties, this shorthand does not take a / between values! If only one value is given, it will set the column gap and the row gap to that value.

The following declarations will be only applied to the child elements to modify the number of rows/columns they take.

Using the CSS properties grid-row-start and grid-row-end, we can make single grid items take up multiple rows.
Row grid lines and column grid lines start at 1 and end at a value that is 1 greater than the number of rows or columns the grid has. For example, if a grid has 5 rows,
 the grid row lines range from 1 to 6. If a grid has 8 rows, the grid row lines range from 1 to 9.

 We can use the property grid-row as shorthand for grid-row-start and grid-row-end.
The following two code blocks will produce the same output:
.item {
  grid-row-start: 4;
  grid-row-end: 6;
}
.item {
  grid-row: 4 / 6;
}

we can use the keyword span to start or end a column or row, relative to its other end. 
.item {
  grid-column: 4 / span 2;
}

This is telling the item element to begin in column four and take up two columns of space. So item would occupy columns four and five. It produces the same result as the following code blocks:

.item {
  grid-column: 4 / 6;
}
We can refactor even more using the property grid-area. This property will set the starting and ending positions for both the rows and columns of an item.
.item {
  grid-area: 2 / 3 / 4 / span 5;
}

grid-area takes four values separated by slashes. The order is important! This is how grid-area will interpret those values.

1. grid-row-start
2. grid-column-start
3. grid-row-end
4. grid-column-end

grid-template-columns defines the number and sizes of the columns of the grid
grid-template-rows defines the number and sizes of the rows of the grid
grid-template is a shorthand for defining both grid-template-columns and grid-template-rows in one line
row-gap puts blank space between the rows of the grid
column-gap puts blank space between the columns of the grid
gap is a shorthand for defining both row-gap and column-gap in one line
grid-row-start and grid-row-end makes elements span certain rows of the grid
grid-column-start and grid-column-end makes elements span certain columns of the grid
grid-area is a shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end, all in one line