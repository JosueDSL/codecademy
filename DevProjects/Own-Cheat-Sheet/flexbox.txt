To designate an element as a flex container, set the element’s display property to flex or inline-flex
Any element can be a flex container.
Flex containers are helpful tools for creating websites that respond to changes in screen sizes. 
Child elements of flex containers will change size and location in response to the size and position of their parent container.
There are several properties we can use to specify how its children behave:

When property declarations are made on the flex container will be represented with a @FlexContainer decorator besides the flex property name.
Same with the case of declarations made on the @FlexItem

# justify-content # @FlexContainer - By default the child elements inside the flex container will colapse from the upper left corner as if they were inline elements from left to right.
Remember when you justify the content of a document on word or any text-editor, a similar concept applies here.
The five commonly used values for the justify-content property:

* flex-start — all items will be positioned in order, starting from the left of the parent container, with no extra space between or before them.
* flex-end — all items will be positioned in order, with the last item starting on the right side of the parent container, with no extra space between or after them.
* center — all items will be positioned in order, in the center of the parent container with no extra space before, between, or after them.
* space-around — items will be positioned with equal space before and after each item, resulting in double the space between elements.
* space-between — items will be positioned with equal space between them, but no extra space before the first or after the last elements.

# align-items # @FlexContainer - The align-items property makes it possible to space flex items vertically.
The five commonly used values for the align-items property:

* flex-start — all elements will be positioned at the top of the parent container.
* flex-end — all elements will be positioned at the bottom of the parent container.
* center — the center of all elements will be positioned halfway between the top and bottom of the parent container.
* baseline — the bottom of the content of all items will be aligned with each other.
* stretch — if possible, the items will stretch from top to bottom of the container 
(this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).

# flex-grow # @FlexItem - Allows to specify if items should grow to fill a container and also which items should grow proportionally more or less than others.
Default value of flex-grow is 0
The flex-grow value means the number of times the items will grow. E.g. flex-grow: 2; will grow twice or taking twice the space of its parent container 
in relation to the other child element within itself.

# flex-shrink # @FlexItem - Just as the flex-grow property proportionally stretches flex items, the flex-shrink property can be used to specify which elements will shrink and in what proportions.
Default value of flex-shrink is 1

* Note
    * Margins are unaffected by flex-grow and flex-shrink
    * Keep in mind, minimum and maximum widths will take precedence over flex-grow and flex-shrink.

# flex-basis  # @FlexItem - Flex-basis allows us to specify the width of an item before it stretches or shrinks.
It comes on handy using it simultaneusly with flex-grow or flex-shrink

# flex # The flex property allows you to declare flex-grow, flex-shrink, and flex-basis all in one line.
* The flex property is different from the flex value used for the display property.
Example:
Before flex:
.big {
  flex-grow: 2;
  flex-shrink: 1;
  flex-basis: 150px;
}
Using flex: 
.big {
  flex: 2 1 150px;
}
* flex-grow, flex-shrink, and flex-basis (in that order)

# flex-wrap # @FlexContainer - Allows the flex items to move to the next line when necessary instead of shrinking to fit the container.
* wrap — child elements of a flex container that don’t fit into a row will move down to the next line
* wrap-reverse — the same functionality as wrap, but the order of rows within a flex container is reversed (for example, in a 2-row flexbox,
 the first row from a wrap container will become the second in wrap-reverse and the second row from the wrap container will become the first in wrap-reverse)
* nowrap — prevents items from wrapping; this is the default value and is only necessary to override a wrap value set by a different CSS rule.

# align-content # @FlexContainer - Align-items is for aligning elements within a single row. If a flex container has multiple rows of content, we can use align-content to space the rows from top to bottom.
Some of the more commonly used align-content values:

* flex-start — all rows of elements will be positioned at the top of the parent container with no extra space between.
* flex-end — all rows of elements will be positioned at the bottom of the parent container with no extra space between.
* center — all rows of elements will be positioned at the center of the parent element with no extra space between.
* space-between — all rows of elements will be spaced evenly from the top to the bottom of the container with no space above the first or below the last.
* space-around — all rows of elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element.
* stretch — if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value).

# flex-direction # @FlexContainer - The main axis and cross axis are interchangeable. We can switch them using the flex-direction property.
If we add the flex-direction property and give it a value of column, the flex items will be ordered vertically, not horizontally.
By default, the main axis is horizontal and the cross axis is vertical.

The main axis is used to position flex items with the following properties:

* justify-content
* flex-wrap
* flex-grow
* flex-shrink
The cross axis is used to position flex items with the following properties:

* align-items
* align-content

Note: As explained above, properties like justify-content will not behave the way they did
The flex-direction property can accept four values:

* row — elements will be positioned from left to right across the parent element starting from the top left corner (default).
* row-reverse — elements will be positioned from right to left across the parent element starting from the top right corner.
* column — elements will be positioned from top to bottom of the parent element starting from the top left corner.
* column-reverse — elements will be positioned from the bottom to the top of the parent element starting from the bottom left corner.

# flex-flow # @FlexContainer - Like the shorthand flex property, the shorthand flex-flow property is used to declare both the flex-wrap and flex-direction properties in one line.
.container {
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;
}
.container {
  display: flex;
  flex-flow: column wrap;
}

All values for flex-direction and flex-wrap are accepted.


# Conclusion: 
display: flex changes an element to a block-level container with flex items inside of it.
display: inline-flex allows multiple flex containers to appear inline with each other.
justify-content is used to space items along the main axis.
align-items is used to space items along the cross axis.
flex-grow is used to specify how much space (and in what proportions) flex items absorb along the main axis.
flex-shrink is used to specify how much flex items shrink and in what proportions along the main axis.
flex-basis is used to specify the initial size of an element styled with flex-grow and/or flex-shrink.
flex is used to specify flex-grow, flex-shrink, and flex-basis in one declaration.
flex-wrap specifies that elements should shift along the cross axis if the flex container is not large enough.
align-content is used to space rows along the cross axis.
flex-direction is used to specify the main and cross axes.
flex-flow is used to specify flex-wrap and flex-direction in one declaration.
Flex containers can be nested inside of each other by declaring display: flex or display: inline-flex for children of flex containers.